// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
public static class AssemblyDefinitionCreator
{
    public static AssemblyDefinitionCreator.AssemblyDefinition GetAssemblyDefinition(string assetPath);
    public static bool WriteAssemblyDefinition(string assetPath, AssemblyDefinitionCreator.AssemblyDefinition assemblyDefinition);
    public class AssemblyDefinition
    {
        public bool allowUnsafeCode;
        public bool autoReferenced;
        public string[] defineConstraints;
        public string[] excludePlatforms;
        public string[] includePlatforms;
        public string name;
        public bool overrideReferences;
        public string[] precompiledReferences;
        public string[] references;
        public bool useGUIDs;
        public AssemblyDefinitionCreator.VersionDefine[] versionDefines;
        public AssemblyDefinition() {}
    }
    public class VersionDefine
    {
        public string define;
        public string expression;
        public string name;
        public VersionDefine() {}
    }
}

public static class Extensions
{
    public static void AddWhenMissing(this System.Collections.Generic.List<string> list, string input, string baseContent);
}

public class ModBuilderSettings : UnityEngine.ScriptableObject
{
    public System.Collections.Generic.List<ModBuilderSettings.ModAsset> assets;
    public bool buildBundles = true;
    public bool buildBurst = true;
    public bool buildLinux;
    public bool cachedBuild;
    public bool forceReimport = true;
    [UnityEngine.HideInInspector] public bool lastBuildLinux;
    public PugMod.ModMetadata metadata;
    public string modPath = @"Assets/Mod";
    public ModBuilderSettings() {}
    public struct ModAsset
    {
        public string hash;
        public string path;
    }
}

public class ProjectFilePostprocessor : UnityEditor.AssetPostprocessor
{
    public ProjectFilePostprocessor() {}
    public static string OnGeneratedCSProject(string path, string content);
    public static string OnGeneratedSlnSolution(string path, string content);
}

public class SpriteInstancingModBuilder : PugMod.IPugModBuilderProcessor
{
    public SpriteInstancingModBuilder() {}
    [UnityEngine.Scripting.Preserve] public void Execute(ModBuilderSettings modBuilderSettings, string installDirectory, System.Collections.Generic.List<string> assetPaths);
}

public class TextInputPopup : UnityEditor.EditorWindow
{
    public TextInputPopup() {}
    public static void ShowWindow(string title, string textFieldLabel, string submit, string cancel, string inputText, System.Action<string> callbackFunction);
}

namespace PugMod
{
    public class AcceptTermsWindow : UnityEditor.EditorWindow
    {
        public AcceptTermsWindow() {}
        public static void CheckIfTermsAccepted(System.Action<bool> callback);
        public void CreateGUI();
    }

    public static class AssetInitializer
    {
        public static System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> JsonFilesToExport;
    }

    public interface IPugModBuilderProcessor
    {
        public void Execute(ModBuilderSettings settings, string installDirectory, System.Collections.Generic.List<string> assetPaths);
    }

    public static class ModBuilder
    {
        public static void BuildMod(ModBuilderSettings settings, string exportPath, System.Action<bool> callback, bool installInSubDirectory = true);
    }

    public class ModBuilderWindow : UnityEditor.EditorWindow
    {
        public ModBuilderWindow() {}
        public static ModBuilderSettings CreateNewMod(string modName);
        public static void ShowWindow();
    }

    public class ModSDKWindow : UnityEditor.EditorWindow
    {
        public ModSDKWindow() {}
        [UnityEditor.MenuItem(@"PugMod/Log out from mod.io")] public static void ClearAcceptedTerms();
        public void CreateGUI();
        [UnityEditor.MenuItem(@"PugMod/Open Mod SDK Window")] public static void OpenWindow();
        public static void ShowError(string message);
    }
}

namespace PugMod.ModIO
{
    public class ModSettings : UnityEngine.ScriptableObject
    {
        public UnityEngine.Texture2D logo;
        public long modId;
        public ModBuilderSettings modSettings;
        public string summary;
        public ModSettings() {}
    }
}
