// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace MoreCommands
{
    public class MoreCommandsMod : PugMod.IMod
    {
        public const string NAME = @"More Commands";
        public const string VERSION = @"1.0.0";
        public static MoreCommands.Data.Configuration.JsonConfigFile<Data.Configuration.Configuration> Config { get; }
        public MoreCommandsMod() {}
        public void EarlyInit();
        public static PugMod.LoadedMod GetModInfo(PugMod.IMod mod);
        public void Init();
        public void ModObjectLoaded(UnityEngine.Object obj);
        public void Shutdown();
        public void Update();
    }
}

namespace MoreCommands.Chat.Commands
{
    public class BackCommand : CoreLib.Commands.ICommandInfo, CoreLib.Commands.IServerCommandHandler
    {
        public BackCommand() {}
        public CoreLib.Commands.CommandOutput Execute(string[] parameters, Unity.Entities.Entity sender);
        public string GetDescription();
        public string[] GetTriggerNames();
    }

    public class HomeCommand : CoreLib.Commands.ICommandInfo, CoreLib.Commands.IServerCommandHandler
    {
        public HomeCommand() {}
        public CoreLib.Commands.CommandOutput Execute(string[] parameters, Unity.Entities.Entity sender);
        public string GetDescription();
        public string[] GetTriggerNames();
    }
}

namespace MoreCommands.Data
{
    public static class JsonBase
    {
        public static System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get; }
    }
}

namespace MoreCommands.Data.Configuration
{
    public class CommandsEnabled
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"back")] [System.Text.Json.Serialization.JsonPropertyOrder(2)] [System.Text.Json.Serialization.JsonRequired] public bool Back { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"home")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public bool Home { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public CommandsEnabled() {}
        public CommandsEnabled(bool home, bool back) {}
        public override string ToString();
    }

    public class Configuration : IConfiguration
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"commands_enabled")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public CommandsEnabled CommandsEnabled { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"death_system")] [System.Text.Json.Serialization.JsonPropertyOrder(3)] [System.Text.Json.Serialization.JsonRequired] public System.Collections.Generic.List<MoreCommands.Systems.DeathWorldEntry> DeathSystem { get; set; }
        [System.Text.Json.Serialization.JsonIgnore] public static Configuration Default { get; }
        [System.Text.Json.Serialization.JsonPropertyName(@"housing_system")] [System.Text.Json.Serialization.JsonPropertyOrder(2)] [System.Text.Json.Serialization.JsonRequired] public System.Collections.Generic.List<MoreCommands.Systems.HomeListWorldEntry> HomeListSystem { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public Configuration() {}
        public Configuration(CommandsEnabled commands_enabled, System.Collections.Generic.List<MoreCommands.Systems.HomeListWorldEntry> housingSystem, System.Collections.Generic.List<MoreCommands.Systems.DeathWorldEntry> deathSystem) {}
        public override string ToString();
    }

    public interface IConfiguration
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class|System.AttributeTargets.Field|System.AttributeTargets.Interface|System.AttributeTargets.Parameter|System.AttributeTargets.Property|System.AttributeTargets.Struct, AllowMultiple = true)] public class JsonCommentAttribute : System.Attribute
    {
        public string Comment { get; set; }
        public JsonCommentAttribute(string comment) {}
    }

    public class JsonCommentConverter : System.Text.Json.Serialization.JsonConverter<string>
    {
        public JsonCommentConverter(string comment) {}
        public override string Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options);
        public override void Write(System.Text.Json.Utf8JsonWriter writer, string value, System.Text.Json.JsonSerializerOptions options);
    }

    public class JsonConfigFile<T> where T : IConfiguration
    {
        public event System.EventHandler ConfigReloaded;
        public event System.EventHandler<CoreLib.Data.Configuration.SettingChangedEventArgs> SettingChanged;
        public string ConfigFilePath { get; }
        public T Context { get; }
        public bool GenerateSettingDescriptions { get; set; }
        public bool SaveOnConfigSet { get; set; }
        public JsonConfigFile(string configPath, bool saveOnInit) {}
        public JsonConfigFile(string configPath, bool saveOnInit, PugMod.LoadedMod ownerMetadata) {}
        public static string GetDirectoryName(string path);
        public void Reload();
        public void Save();
    }
}

namespace MoreCommands.Data.Converter
{
    public class Float2JsonConverter : System.Text.Json.Serialization.JsonConverterFactory
    {
        public Float2JsonConverter() {}
        public override bool CanConvert(System.Type typeToConvert);
        public override System.Text.Json.Serialization.JsonConverter CreateConverter(System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options);
        public class Float2JsonConverterInner : System.Text.Json.Serialization.JsonConverter<Unity.Mathematics.float2>
        {
            public Float2JsonConverterInner(System.Text.Json.JsonSerializerOptions options) {}
            public override Unity.Mathematics.float2 Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options);
            public override void Write(System.Text.Json.Utf8JsonWriter writer, Unity.Mathematics.float2 value, System.Text.Json.JsonSerializerOptions options);
        }
    }

    public class Float3JsonConverter : System.Text.Json.Serialization.JsonConverterFactory
    {
        public Float3JsonConverter() {}
        public override bool CanConvert(System.Type typeToConvert);
        public override System.Text.Json.Serialization.JsonConverter CreateConverter(System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options);
        public class Float3JsonConverterInner : System.Text.Json.Serialization.JsonConverter<Unity.Mathematics.float3>
        {
            public Float3JsonConverterInner(System.Text.Json.JsonSerializerOptions options) {}
            public override Unity.Mathematics.float3 Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options);
            public override void Write(System.Text.Json.Utf8JsonWriter writer, Unity.Mathematics.float3 value, System.Text.Json.JsonSerializerOptions options);
        }
    }
}

namespace MoreCommands.Patches
{
    [HarmonyLib.HarmonyPatch] public static class Death_Patch
    {
        [HarmonyLib.HarmonyPatch(typeof(PlayerState.Death), @"RespawnPlayer")] [HarmonyLib.HarmonyPrefix] public static bool RespawnPlayer_Prefix(PlayerState.StateUpdateAspect stateUpdateAspect, PlayerState.SharedStateUpdateData sharedStateUpdateData, PlayerState.LookupStateUpdateData lookupStateUpdateData);
    }
}

namespace MoreCommands.Systems
{
    public sealed class DeathEntry : System.IEquatable<DeathEntry>
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"direction")] [System.Text.Json.Serialization.JsonPropertyOrder(2)] [System.Text.Json.Serialization.JsonRequired] public Direction Direction { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"position")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public Unity.Mathematics.float3 Position { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public DeathEntry() {}
        [System.Text.Json.Serialization.JsonConstructor] public DeathEntry(Unity.Mathematics.float3 position, Direction direction) {}
        public DeathEntry(Unity.Mathematics.float3 position, Direction direction, System.Collections.Generic.List<DeathEntry> parent) {}
        public bool Equals(DeathEntry other);
        public override bool Equals(object obj);
        public static bool Equals(DeathEntry x, DeathEntry y);
        public override int GetHashCode();
        public static int GetHashCode(DeathEntry obj);
        public override string ToString();
    }

    public sealed class DeathPlayerEntry : System.IEquatable<DeathPlayerEntry>
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"death_positions")] [System.Text.Json.Serialization.JsonPropertyOrder(3)] [System.Text.Json.Serialization.JsonRequired] public System.Collections.Generic.List<DeathEntry> DeathPositions { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"player_name")] [System.Text.Json.Serialization.JsonPropertyOrder(2)] [System.Text.Json.Serialization.JsonRequired] public string PlayerName { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"player_uuid")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public string PlayerUuid { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public DeathPlayerEntry() {}
        public DeathPlayerEntry(PlayerController player) {}
        public DeathPlayerEntry(string player_uuid, string player_name, System.Collections.Generic.List<DeathEntry> death_positions) {}
        public bool Equals(DeathPlayerEntry other);
        public override bool Equals(object obj);
        public static bool Equals(DeathPlayerEntry x, DeathPlayerEntry y);
        public override int GetHashCode();
        public static int GetHashCode(DeathPlayerEntry obj);
        public override string ToString();
    }

    public static class DeathSystemExtensions
    {
        public static DeathEntry AddDeathEntry(this System.Collections.Generic.List<DeathEntry> entries, PlayerController player);
        public static DeathPlayerEntry AddEntry(this System.Collections.Generic.List<DeathPlayerEntry> entries, PlayerController player);
        public static DeathWorldEntry AddEntry(this System.Collections.Generic.List<DeathWorldEntry> list, string worldName);
        public static DeathPlayerEntry AddPlayerEntry(this System.Collections.Generic.List<DeathWorldEntry> list, PlayerController pc);
        public static DeathPlayerEntry GetPlayerEntry(this System.Collections.Generic.List<DeathWorldEntry> list, string worldName, PlayerController pc);
        public static DeathWorldEntry GetWorldEntry(this System.Collections.Generic.List<DeathWorldEntry> list, string worldName);
        public static void Init(this System.Collections.Generic.List<DeathWorldEntry> list);
        public static bool TryGetWorldEntry(this System.Collections.Generic.List<DeathWorldEntry> list, string worldName, out DeathWorldEntry deathWorldEntry);
    }

    public sealed class DeathWorldEntry : System.IEquatable<DeathWorldEntry>
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"player_entries")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public System.Collections.Generic.List<DeathPlayerEntry> PlayerEntries { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"world_name")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public string WorldName { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public DeathWorldEntry() {}
        public DeathWorldEntry(string world_name, System.Collections.Generic.List<DeathPlayerEntry> player_entries) {}
        public bool Equals(DeathWorldEntry other);
        public override bool Equals(object obj);
        public static bool Equals(DeathWorldEntry x, DeathWorldEntry y);
        public override int GetHashCode();
        public static int GetHashCode(DeathWorldEntry obj);
        public override string ToString();
        public bool TryGetPlayerEntry(string playerName, out DeathPlayerEntry deathPlayerEntry);
    }

    public sealed class HomeListEntry : System.IEquatable<HomeListEntry>
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"direction")] [System.Text.Json.Serialization.JsonPropertyOrder(3)] [System.Text.Json.Serialization.JsonRequired] public Direction Direction { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"label")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public string Label { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"position")] [System.Text.Json.Serialization.JsonPropertyOrder(2)] [System.Text.Json.Serialization.JsonRequired] public Unity.Mathematics.float2 Position { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public HomeListEntry() {}
        public HomeListEntry(string label) {}
        public HomeListEntry(string label, Unity.Mathematics.float2 position, Direction direction) {}
        public bool Equals(HomeListEntry other);
        public override bool Equals(object obj);
        public static bool Equals(HomeListEntry x, HomeListEntry y);
        public override int GetHashCode();
        public static int GetHashCode(HomeListEntry obj);
        public override string ToString();
    }

    public sealed class HomeListPlayerEntry : System.IEquatable<HomeListPlayerEntry>
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"list_of_houses")] [System.Text.Json.Serialization.JsonPropertyOrder(3)] [System.Text.Json.Serialization.JsonRequired] public System.Collections.Generic.List<HomeListEntry> ListOfHouses { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"player_name")] [System.Text.Json.Serialization.JsonPropertyOrder(2)] [System.Text.Json.Serialization.JsonRequired] public string PlayerName { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"player_uuid")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public string PlayerUuid { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public HomeListPlayerEntry() {}
        public HomeListPlayerEntry(PlayerController player) {}
        public HomeListPlayerEntry(string playerUuid, string playerName, System.Collections.Generic.List<HomeListEntry> listOfHouses) {}
        public bool Equals(HomeListPlayerEntry other);
        public override bool Equals(object obj);
        public static bool Equals(HomeListPlayerEntry x, HomeListPlayerEntry y);
        public override int GetHashCode();
        public static int GetHashCode(HomeListPlayerEntry obj);
        public void RemoveHouse(HomeListEntry homeListEntry);
        public void RemoveHouse(string label);
        public override string ToString();
    }

    public static class HomeListSystemExtensions
    {
        public static HomeListEntry AddDefaultEntry(this System.Collections.Generic.List<HomeListEntry> entries, PlayerController player);
        public static HomeListWorldEntry AddEntry(this System.Collections.Generic.List<HomeListWorldEntry> list, string worldName);
        public static HomeListPlayerEntry AddEntry(this System.Collections.Generic.List<HomeListPlayerEntry> entries, string label, PlayerController player);
        public static HomeListEntry AddHomeListEntry(this System.Collections.Generic.List<HomeListEntry> entries, string label, PlayerController player);
        public static HomeListPlayerEntry AddPlayerEntry(this System.Collections.Generic.List<HomeListWorldEntry> list, string label, PlayerController pc);
        public static HomeListPlayerEntry GetPlayerEntry(this System.Collections.Generic.List<HomeListWorldEntry> list, string label, string worldName, PlayerController pc);
        public static HomeListWorldEntry GetWorldEntry(this System.Collections.Generic.List<HomeListWorldEntry> list, string worldName);
        public static void Init(this System.Collections.Generic.List<HomeListWorldEntry> list);
        public static bool TryGetWorldEntry(this System.Collections.Generic.List<HomeListWorldEntry> list, string worldName, out HomeListWorldEntry homeWorldEntry);
    }

    public class HomeListWorldEntry
    {
        [System.Text.Json.Serialization.JsonPropertyName(@"player_entries")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public System.Collections.Generic.List<HomeListPlayerEntry> PlayerEntries { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName(@"world_name")] [System.Text.Json.Serialization.JsonPropertyOrder(1)] [System.Text.Json.Serialization.JsonRequired] public string WorldName { get; set; }
        [System.Text.Json.Serialization.JsonConstructor] public HomeListWorldEntry() {}
        public HomeListWorldEntry(string world_name, System.Collections.Generic.List<HomeListPlayerEntry> playerEntries) {}
        public override string ToString();
        public bool TryGetPlayerEntry(string playerName, out HomeListPlayerEntry housingPlayerEntry);
    }
}

namespace MoreCommands.Util
{
    public static class Extensions
    {
        public static bool Equals(this Unity.Mathematics.float2 value, System.Nullable<Unity.Mathematics.float2> other);
        public static bool Equals(this Unity.Mathematics.float2 value, object obj);
        public static bool Equals(this Unity.Mathematics.float3 value, System.Nullable<Unity.Mathematics.float3> other);
        public static bool Equals(this Unity.Mathematics.float3 value, object obj);
        public static bool IsAdmin(this Unity.Entities.Entity playerEntity);
        public static Direction ToDirection(this int value);
        public static string ToMathString(this Unity.Mathematics.float2 value);
        public static string ToMathString(this Unity.Mathematics.float3 value);
        public static string TrimQuotes(this string input, out System.Nullable<CoreLib.Commands.CommandOutput> failedCommand);
    }

    public class Logger
    {
        public static void Error(string message);
        public void ErrorImpl(string message);
        public static void Info(string message);
        public void InfoImpl(string message);
        public static void Init(string modName);
    }
}
